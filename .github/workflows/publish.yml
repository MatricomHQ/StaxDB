# .github/workflows/publish.yml

name: Publish StaxDB to NPM

on:
  push:
    branches:
      - 'release-test' # Trigger on pushes to 'release-test' for iterative testing
    # tags:
    #   - 'v*.*.*' # Uncomment this for actual release publishing

jobs:
  build-macos:
    name: Build for macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          # This will run on an x64 runner for both archs
          - arch: x64
          - arch: arm64 # We will cross-compile for arm64 on the x64 runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build native addon for macOS
        shell: bash
        run: |
          set -e
          cd stax_js

          echo "--- Installing Node.js dependencies ---"
          npm install --ignore-scripts

          echo "--- Compiling native addon for darwin-${{ matrix.arch }} ---"
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            npm exec -- node-gyp rebuild --arch=arm64 --target_arch=arm64
          else
            npm exec -- node-gyp rebuild
          fi

          echo "--- Staging pre-built binary ---"
          # FIX: Removed invalid 'local' keyword
          PLATFORM_DIR="darwin-${{ matrix.arch }}"
          
          mkdir -p ../prebuilds-staging/${PLATFORM_DIR}
          cp build/Release/staxdb.node ../prebuilds-staging/${PLATFORM_DIR}/staxdb.node
          echo "Binary staged to ../prebuilds-staging/${PLATFORM_DIR}/staxdb.node"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-macos-${{ matrix.arch }}
          path: prebuilds-staging/

  build-linux:
    name: Build for Linux (x64) using manylinux
    runs-on: ubuntu-latest
    # FIX: Use a container with a compatible C++ compiler toolchain for manylinux
    # The manylinux2014 image has an old GCC. The devtoolset-10 provides a modern GCC while still linking to old glibc.
    container:
      image: quay.io/pypa/manylinux2014_x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Environment and Install Node.js
        # FIX: Manually install Node.js inside the container to avoid glibc conflicts.
        # Use devtoolset-10 to get a modern C++ compiler.
        shell: bash
        run: |
          set -e
          source /opt/rh/devtoolset-10/enable
          
          # Install NVM and a compatible Node.js version
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          source "$NVM_DIR/nvm.sh"
          nvm install 20
          nvm use 20
          
          # Add Node to the path for subsequent steps
          echo "$NVM_DIR/versions/node/$(nvm current)/bin" >> $GITHUB_PATH

      - name: Build native addon for Linux
        shell: bash
        run: |
          set -e
          # Activate the modern compiler toolchain again
          source /opt/rh/devtoolset-10/enable
          
          cd stax_js

          echo "--- Installing Node.js dependencies ---"
          # The --unsafe-perm flag is needed when running as root in a container
          npm install --ignore-scripts --unsafe-perm

          echo "--- Compiling native addon for linux-x64-glibc ---"
          npm exec -- node-gyp rebuild

          echo "--- Staging pre-built binary ---"
          # Name the directory to match your postinstall script's logic
          PLATFORM_DIR="linux-x64-glibc"
          
          mkdir -p ../prebuilds-staging/${PLATFORM_DIR}
          cp build/Release/staxdb.node ../prebuilds-staging/${PLATFORM_DIR}/staxdb.node
          echo "Binary staged to ../prebuilds-staging/${PLATFORM_DIR}/staxdb.node"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-linux-x64
          path: prebuilds-staging/

  publish:
    name: Publish to NPM
    needs: [build-macos, build-linux] # Depend on both build jobs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: stax_js/prebuilds
          # New simplified download strategy:
          # This pattern will match all artifacts and merge them.
          # The result is that each artifact's content (the platform-specific folder)
          # is placed directly into the target `path`.
          pattern: prebuilds-*
          merge-multiple: true

      - name: Prepare and Publish
        shell: bash
        run: |
          set -e
          
          echo "--- Final prebuilds directory structure ---"
          ls -R stax_js/prebuilds
          
          cd stax_js
          
          echo "--- Installing dependencies for publishing ---"
          npm install --ignore-scripts

          echo "--- Publishing to NPM ---"
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}