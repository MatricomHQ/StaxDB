name: Publish StaxDB to NPM

on:
  push:
    branches:
      - 'release-test' # Trigger on pushes to the 'release-test' branch for iterative testing
    # tags:
    #   - 'v*.*.*' # Uncomment this for actual release publishing

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: macos-latest # This will run on an x64 runner
            arch: x64
          - os: macos-latest # We will cross-compile for arm64 on the x64 runner
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install C++ build tools (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential
      
      # For macOS, Xcode Command Line Tools are pre-installed on runners

      - name: Build native addon
        id: build_addon
        shell: bash
        run: |
          set -e
          cd stax_js

          echo "--- Installing Node.js dependencies ---"
          npm install --ignore-scripts

          echo "--- Compiling native addon for ${{ matrix.os }}-${{ matrix.arch }} ---"
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            npm exec -- node-gyp rebuild --arch=arm64 --target_arch=arm64
          else
            npm exec -- node-gyp rebuild
          fi

          echo "--- Staging pre-built binary ---"
          PLATFORM_DIR=""
          if [[ "${{ runner.os }}" == "Linux" ]]; then
              PLATFORM_DIR="linux-x64"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
              PLATFORM_DIR="darwin-${{ matrix.arch }}"
          fi
          
          mkdir -p ../prebuilds-staging/${PLATFORM_DIR}
          cp build/Release/staxdb.node ../prebuilds-staging/${PLATFORM_DIR}/staxdb.node
          echo "Binary staged to ../prebuilds-staging/${PLATFORM_DIR}/staxdb.node"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuilds-${{ matrix.os }}-${{ matrix.arch }}
          path: prebuilds-staging/

  publish:
    name: Publish to NPM
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: prebuilds-all/
      
      - name: Prepare package for publishing
        shell: bash
        run: |
          set -e
          echo "--- Consolidating pre-built binaries ---"
          mkdir -p stax_js/prebuilds

          echo "Downloaded artifact structure:"
          ls -R prebuilds-all/

          # !!! BUG FIX !!!
          # The previous glob pattern was incorrect. The correct pattern is `prebuilds-all/prebuilds-*/*`
          # which copies the platform directories (e.g., 'darwin-arm64') into stax_js/prebuilds/.
          cp -r prebuilds-all/prebuilds-*/* stax_js/prebuilds/
          
          echo "--- Final prebuilds directory structure ---"
          ls -R stax_js/prebuilds
          
          echo "--- Installing dependencies for publishing ---"
          cd stax_js
          npm install --ignore-scripts


      - name: Publish to NPM
        run: |
          cd stax_js
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}